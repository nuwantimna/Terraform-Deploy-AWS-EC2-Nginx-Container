AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Minimal VPC + public subnet + IGW + route + SG + EC2 (SSM Session Manager; no SSH key).
  Generated from the user's file, cleaned to mirror the Terraform layout.

Parameters:
  EnvPrefix:
    Type: String
    Default: dev
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  SubnetCidr:
    Type: String
    Default: 10.0.10.0/24
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a
  InstanceType:
    Type: String
    Default: t3.micro
  # Use SSM public parameter for latest Amazon Linux 2023 by default.
  AmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
  OpenHttpPort:
    Type: Number
    Default: 8080
    MinValue: 1
    MaxValue: 65535
    Description: TCP port to expose from the container to the internet.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvPrefix}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvPrefix}-igw'

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvPrefix}-subnet-1'

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvPrefix}-rt'

  DefaultRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${EnvPrefix} security group (no SSH; SSM only)'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref OpenHttpPort
          ToPort: !Ref OpenHttpPort
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvPrefix}-sg'

  SSMInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub '${EnvPrefix}-ec2-ssm-role'

  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref SSMInstanceRole ]

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: [ !Ref AppSecurityGroup ]
      IamInstanceProfile: !Ref SSMInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub '${EnvPrefix}-server'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -euxo pipefail
          yum update -y
          yum install -y docker
          systemctl enable --now docker
          usermod -aG docker ec2-user
          docker run -d -p ${OpenHttpPort}:80 --name web-server nginx

Outputs:
  InstanceId:
    Value: !Ref EC2Instance
  InstancePublicIp:
    Value: !GetAtt EC2Instance.PublicIp
  InstancePublicDns:
    Value: !GetAtt EC2Instance.PublicDnsName
  VpcId:
    Value: !Ref VPC
  SubnetId:
    Value: !Ref PublicSubnet
  SecurityGroupId:
    Value: !Ref AppSecurityGroup
